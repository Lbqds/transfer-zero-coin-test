/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as Token1ContractJson } from "../Token1.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace Token1Types {
  export type State = Omit<ContractState<any>, "fields">;
}

class Factory extends ContractFactory<Token1Instance, {}> {
  at(address: string): Token1Instance {
    return new Token1Instance(address);
  }

  tests = {
    f: async (
      params?: Omit<
        TestContractParamsWithoutMaps<never, never>,
        "testArgs" | "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "f", params === undefined ? {} : params);
    },
  };
}

// Use this object to test and deploy the contract
export const Token1 = new Factory(
  Contract.fromJson(
    Token1ContractJson,
    "",
    "928360bf58942dd1fdd8d197e0e2ef59ecddbf71a6e8fe25d2c0665274f80ce3"
  )
);

// Use this class to interact with the blockchain
export class Token1Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<Token1Types.State> {
    return fetchContractState(Token1, this);
  }
}
